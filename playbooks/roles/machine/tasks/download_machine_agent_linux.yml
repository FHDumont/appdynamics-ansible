# ---
# # - name: Validate that the agent download URL is fit for Linux
# #   assert:
# #     that: "linux_ma_finder_string in agent_download_url.stdout"

# #     fail_msg: "It looks like you have downloaded the Windows machine agent instead of the Linux machine agent. You entered '{{ qualified_agent_type }}' in the playbook. The URL: {{ agent_download_url.stdout }} is expected to contain {{ linux_ma_finder_string }}"
# #     success_msg: "Successfully validated {{ qualified_agent_type }} for Linux"

# - name: Machine Agent linux Block
#   become: true
#   block:
#   - include_tasks: appd_sudoer.yml
#   - name: Ensures machine agent {{ machine_agent_dest_folder_linux }} dir exists
#     file:
#       path: "{{ machine_agent_dest_folder_linux }}/"
#       state: directory
#       mode: 0755
#       owner: "{{ appdynamics_user }}"
#       group: "{{ appdynamics_user }}"

#   - name: Check if Machine Agent is already installed
#     stat:
#       path: "{{ machine_agent_dest_folder_linux }}/machineagent.jar"
#     register: previous_agent

#   - name: Backup existing Machine Agent
#     archive:
#       path: "{{ machine_agent_dest_folder_linux }}"
#       dest: "/tmp/machine_agent.{{ ansible_date_time.iso8601 }}.zip"
#       mode: 0755
#     when: previous_agent.stat.exists
#     changed_when: false

#   - name: Stop Machine Agent service
#     systemd:
#       name: appdynamics-machine-agent
#       state: stopped
#       daemon_reload: yes
#     changed_when: false
#     when: previous_agent.stat.exists

#   - name: Clean up old Machine Agent binaries after backup
#     file:
#       path: "{{ machine_agent_dest_folder_linux }}"
#       state: absent
#     changed_when: false

#   - name: Re-create the machine agent {{ machine_agent_dest_folder_linux }} dir
#     file:
#       path: "{{ machine_agent_dest_folder_linux }}/"
#       state: directory
#       mode: 0755
#       owner: "{{ appdynamics_user }}"
#       group: "{{ appdynamics_user }}"
#     changed_when: false

#   - name: Adjust the Machine agent file name to match the target OS
#     set_fact:
#       agent_file: "machineagent-bundle-64bit-linux-{{ agent_version }}.zip"
#     when: ansible_os_family == 'RedHat' or  ansible_os_family == 'Debian'

#   - name: Downloading Machine Agent
#     get_url:
#       url: '{{ artifactory_url }}/{{agent_file}}'
#       dest: "{{ machine_agent_dest_folder_linux }}/{{ ma_agent_dest_file }}"
#       username: "{{ artifactory_username }}"
#       password: "{{ artifactory_password }}"
#       force: true
#     no_log: true #To prevent passwords to be on logs
#     changed_when: false
#     register: result
#     failed_when: result.status_code != 200

#   - debug:
#       msg: "{{ result }}"

#   - name: Unzip the Machine agent file
#     unarchive:
#       src:  "{{ machine_agent_dest_folder_linux }}/{{ ma_agent_dest_file }}"
#       dest: "{{ machine_agent_dest_folder_linux }}"
#       owner: "{{ appdynamics_user }}"
#       group: "{{ appdynamics_user }}"
#       mode: 0755
#       remote_src: yes
#     changed_when: false

#   - name: Configure Machine Agent controller-info.xml file
#     template:
#       src: templates/machine-agent-controller-info.xml.j2
#       dest: '{{ machine_agent_dest_folder_linux }}/conf/controller-info.xml'
#       owner: "{{ appdynamics_user }}"
#       group: "{{ appdynamics_user }}"
#       mode: 0755
#     changed_when: false

#   # Update the Log4j setting to apply the desired log level to all the loggers
#   # listed in the {{agent_loggers}} list.
#   - name: Set the log level on the agent (if != info, which it is by default)
#     include_role:
#       name: logger
#     vars:
#       logger_role_standalone: false # no need to check if the dir exists
#     when: agent_log_level|lower != 'info'

#   - name: Ensure machine agent file is executable
#     file:
#       path: "{{ machine_agent_dest_folder_linux }}/bin/machine-agent"
#       mode: 0755

#   - include_tasks: configure_log_analytics_linux.yml
#     when: enable_analytics_agent | bool

#  #Custom Extensions
# - include_tasks: configure_custom_extensions_linux.yml
#   when: enable_custom_extensions | bool
