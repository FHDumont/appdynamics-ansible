---

- name: Print extensions setting
  debug:
    msg: "Adding custom extenison: {{ item.key }}!"
  with_dict: "{{ custom_extensions_windows }}"
  when: 
    - item.value.enabled|bool == True
    - (is_support_group_paas|bool == True and item.value.is_paas_only|default(false)|bool == True) or item.value.is_paas_only|default(false) == False

- name: Check if custom extension file exists
  win_uri:
    url: '{{ artifactory_url }}/{{ item.value.extension_file }}'
    method: HEAD
    url_username: "{{ artifactory_username }}"
    url_password: "{{ artifactory_password }}"
  register: uri_test
  # fail with error if status is unexpected
  failed_when: uri_test.status_code is undefined or uri_test.status_code <= 0 or uri_test.status_code >=400
  with_dict: "{{ custom_extensions_windows }}"
  when: 
    - item.value.enabled|bool == True
    - (is_support_group_paas|bool == True and item.value.is_paas_only|default(false)|bool == True) or item.value.is_paas_only|default(false) == False


# Downloading custom extension
- name: Downloading Windows custom extensions 
  win_get_url:
    url: '{{ artifactory_url }}/{{ item.value.extension_file }}'
    dest: "{{ machine_agent_dest_folder_win }}/monitors"
    url_username: "{{ artifactory_username }}"
    url_password: "{{ artifactory_password }}"
    force: true
  no_log: true #To prevent passwords to be on logs
  changed_when: false
  register: result
  failed_when: result.status_code != 200
  with_dict: "{{ custom_extensions_windows }}"
  when: 
    - item.value.enabled|bool == True
    - (is_support_group_paas|bool == True and item.value.is_paas_only|default(false)|bool == True) or item.value.is_paas_only|default(false) == False

- name: Unzip extension file
  win_unzip:
    src: "{{ machine_agent_dest_folder_win }}/monitors/{{ item.value.extension_file }}"
    dest: "{{ machine_agent_dest_folder_win }}/monitors/{{ item.value.extension_folder }}"
    remote_src: yes
  with_dict: "{{ custom_extensions_windows }}"
  when: 
    - item.value.enabled|bool == True
    - (is_support_group_paas|bool == True and item.value.is_paas_only|default(false)|bool == True) or item.value.is_paas_only|default(false) == False

- name: Clean up - remove {{ item.value.extension_file }}
  win_file:
    path: "{{ machine_agent_dest_folder_win }}/monitors/{{ item.value.extension_file }}"
    state: absent
  changed_when: false
  with_dict: "{{ custom_extensions_windows }}"
  when: 
    - item.value.enabled|bool == True
    - (is_support_group_paas|bool == True and item.value.is_paas_only|default(false)|bool == True) or item.value.is_paas_only|default(false) == False

# Include variable files for different custom extensions
#Include variable files for different custom extensions
# - include_vars: custom_extension_vars/event_log_win_config.yml
# - include_vars: custom_extension_vars/process_monitor_win_config.yml

- name: Load in custom extension variables
  include_vars:
    file: custom_extension_vars/{{ item.value.extension_vars }}.yml
  with_dict: "{{ custom_extensions_windows }}"

# Overwrite values with PAAS when enabled
- name: Overwrite variables when 'is_support_group_paas' is True
  include_vars:
    file: custom_extension_vars/{{ item.value.extension_vars }}.paas.yml
  with_dict: "{{ custom_extensions_windows }}"
  when: is_support_group_paas | bool == True

# Configure
- name: Configure Custom Extension config file - if Custom Extension is enabled
  template:
    src: "templates/custom_extensions/{{ item.value.extension_template }}"
    dest: '{{ machine_agent_dest_folder_win }}/monitors/{{ item.value.extension_folder }}/config.json'
    owner: "{{ appdynamics_user }}"
    group: "{{ appdynamics_user }}"
    mode: 0755
  changed_when: false
  with_dict: "{{ custom_extensions_windows }}"
  when: 
    - item.value.enabled|bool == True
    - (is_support_group_paas|bool == True and item.value.is_paas_only|default(false)|bool == True) or item.value.is_paas_only|default(false) == False



