
---

- name: Create subdirectory for custom extension
  win_file:
    path: "{{ machine_agent_dest_folder_win }}/monitors"
    state: directory

- name: Print extensions setting
  debug:
    var: item
  with_dict: "{{ custom_extensions_windows }}"

#todo: check if extesnion exists in target JFrog Artifactory - https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-FileInfo 
#https://stackoverflow.com/questions/42485260/ansible-check-file-exists-in-the-http-path-before-get-url-win-get-url

- name: Downloading Windows custom extensions
  win_get_url:
    url: '{{ artifactory_url }}/{{ item.value.extension_file }}'
    dest: "{{ machine_agent_dest_folder_win }}/monitors"
    username: "{{ artifactory_username }}"
    password: "{{ artifactory_password }}"
    force: true
  no_log: true #To prevent passwords to be on logs
  changed_when: false
  register: result
  failed_when: result.status_code != 200
  with_dict: "{{ custom_extensions_windows }}"
  when: item.value.enabled | bool == True

- name: Unzip extension file
  win_unzip:
    src: "{{ machine_agent_dest_folder_win }}/monitors/{{ item.value.extension_file }}"
    dest: "{{ machine_agent_dest_folder_win }}/monitors/{{ item.value.extension_folder }}"
    remote_src: yes
  with_dict: "{{ custom_extensions_windows }}"
  when: item.value.enabled | bool == True
  

- name: Clean up - remove {{ item.value.extension_file }}
  win_file:
    path: "{{ machine_agent_dest_folder_win }}/monitors/{{ item.value.extension_file }}"
    state: absent
  changed_when: false
  with_dict: "{{ custom_extensions_windows }}"
  when: item.value.enabled | bool == True

#Include variable files for different custom extensions
- include_vars: custom_extension_vars/event_log_win_config.yml
- include_vars: custom_extension_vars/process_monitor_win_config.yml

# - name: Check WindowsEventLogsMonitoring is enabled
#   set_fact:
#       WindowsEventLogsMonitoring_enabled: "{{ true if custom_extensions_windows.WindowsEventLogsMonitoring.enabled == true else false }}"
#   loop: "{{ lookup('dict', custom_extensions_windows) }}"

- name: Configure Custom Extension config file - if Custom Extension is enabled
  template:
    src: "templates/{{ item.value.template }}"
    dest: '{{ machine_agent_dest_folder_win }}/monitors/{{ item.value.extension_folder }}/config.json'
    owner: "{{ appdynamics_user }}"
    group: "{{ appdynamics_user }}"
    mode: 0755
  changed_when: false
  with_dict: "{{custom_extensions_windows}}"
  when: item.value.enabled | bool == True
  #when: WindowsEventLogsMonitoring_enabled == true

# - name: Check WindowsProcessMonitoring is enabled
#   set_fact:
#       WindowsProcessMonitoring_enabled: "{{ true if custom_extensions_windows.WindowsProcessMonitoring.enabled == true else false }}"
#   loop: "{{ lookup('dict', custom_extensions_windows) }}"

# - name: Configure Process Monitoring config file - if WindowsProcessMonitoring is enabled
#   template:
#     src: templates/process-monitor-win-config.json.j2
#     dest: '{{ machine_agent_dest_folder_win }}/monitors/{{ item.value.extension_folder }}/config.json' 
#     owner: "{{ appdynamics_user }}"
#     group: "{{ appdynamics_user }}"
#     mode: 0755
#   changed_when: false
#   when: WindowsProcessMonitoring_enabled == true 


### 
### 

# - name: Copy file with owner and permissions (testing on local)
#   copy:
#     src: 
#     dest: "{{ machine_agent_dest_folder_win }}/monitors/customextensions"
#     mode: 0755
#     changed_when: false
#     register: result


# - name: Download custom extension - artifactory
#     win_get_url:
#       url: '{{artifactory_url}}/{{extension_file}}'
#       dest: "{{ machine_agent_dest_folder_win }}/monitors/customextensions"
#       username: "{{ username }}"
#       password: "{{ password }}"
#       force: true
#     no_log: true #To prevent passwords to be on logs
#     changed_when: false
#     register: result
#     failed_when: result.status_code != 200

# - name: Unzip custom extension file
#   win_unzip:
#     src: "{{ machine_agent_dest_folder_win }}/monitors/customextensions"
#     dest: "{{ machine_agent_dest_folder_win }}/monitors/customextensions"
#     remote_src: yes
#   changed_when: false